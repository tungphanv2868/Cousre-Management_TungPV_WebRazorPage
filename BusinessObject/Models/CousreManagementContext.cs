// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace BusinessObject.Models
{
    public partial class CousreManagementContext : DbContext
    {
        public CousreManagementContext()
        {
        }

        public CousreManagementContext(DbContextOptions<CousreManagementContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Attendance> Attendance { get; set; }
        public virtual DbSet<Course> Course { get; set; }
        public virtual DbSet<Enrollment> Enrollment { get; set; }
        public virtual DbSet<Instructor> Instructor { get; set; }
        public virtual DbSet<Major> Major { get; set; }
        public virtual DbSet<Section> Section { get; set; }
        public virtual DbSet<Semeter> Semeter { get; set; }
        public virtual DbSet<Student> Student { get; set; }
        public virtual DbSet<Subject> Subject { get; set; }


        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Server=DESKTOP-O3VQ1NF\\SQLEXPRESS;Database=CousreManagement;uid=sa;pwd=1234567890;TrustServerCertificate=True;");
            }
        }
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Attendance>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SectionId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Section_Id");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.StudentId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Student_Id");

                entity.HasOne(d => d.Section)
                    .WithMany(p => p.Attendance)
                    .HasForeignKey(d => d.SectionId)
                    .HasConstraintName("FK_Attendance_Section");

                entity.HasOne(d => d.Student)
                    .WithMany(p => p.Attendance)
                    .HasForeignKey(d => d.StudentId)
                    .HasConstraintName("FK_Attendance_Student");
            });

            modelBuilder.Entity<Course>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Decription).HasMaxLength(100);

                entity.Property(e => e.InstructorId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Instructor_Id");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.SemeterId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Semeter_Id");

                entity.Property(e => e.Shedule).HasColumnType("date");

                entity.Property(e => e.SubjectId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Subject_Id");

                entity.HasOne(d => d.Instructor)
                    .WithMany(p => p.Course)
                    .HasForeignKey(d => d.InstructorId)
                    .HasConstraintName("FK_Course_Instructor");

                entity.HasOne(d => d.Subject)
                    .WithMany(p => p.Course)
                    .HasForeignKey(d => d.SubjectId)
                    .HasConstraintName("FK_Course_Subject");
            });

            modelBuilder.Entity<Enrollment>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CourseId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Course_Id");

                entity.Property(e => e.EnrollmentDate)
                    .HasColumnType("date")
                    .HasColumnName("Enrollment_Date");

                entity.Property(e => e.StudentId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Student_Id");

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.Enrollment)
                    .HasForeignKey(d => d.CourseId)
                    .HasConstraintName("FK_Enrollment_Course");

                entity.HasOne(d => d.Student)
                    .WithMany(p => p.Enrollment)
                    .HasForeignKey(d => d.StudentId)
                    .HasConstraintName("FK_Enrollment_Student");
            });

            modelBuilder.Entity<Instructor>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Decription).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<Major>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Decription).HasMaxLength(100);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Section>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AttendanceId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Attendance_Id");

                entity.Property(e => e.CourseId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Course_Id");

                entity.Property(e => e.InstructorId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Instructor_Id");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.Section)
                    .HasForeignKey(d => d.CourseId)
                    .HasConstraintName("FK_Section_Course");

                entity.HasOne(d => d.Instructor)
                    .WithMany(p => p.Section)
                    .HasForeignKey(d => d.InstructorId)
                    .HasConstraintName("FK_Section_Instructor");
            });

            modelBuilder.Entity<Semeter>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Description).HasMaxLength(100);

                entity.Property(e => e.EndDate)
                    .HasColumnType("date")
                    .HasColumnName("End_date");

                entity.Property(e => e.MajorId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Major_Id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StartDate)
                    .HasColumnType("date")
                    .HasColumnName("Start_date");

                entity.HasOne(d => d.Major)
                    .WithMany(p => p.Semeter)
                    .HasForeignKey(d => d.MajorId)
                    .HasConstraintName("FK_Semeter_Major");
            });

            modelBuilder.Entity<Student>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Birthdate).HasColumnType("date");

                entity.Property(e => e.FirstName).HasMaxLength(50);

                entity.Property(e => e.LastName).HasMaxLength(50);

                entity.Property(e => e.MajorId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Major_Id");

                entity.HasOne(d => d.Major)
                    .WithMany(p => p.Student)
                    .HasForeignKey(d => d.MajorId)
                    .HasConstraintName("FK_Student_Major");
            });

            modelBuilder.Entity<Subject>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.MajorId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Major_Id");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.HasOne(d => d.Major)
                    .WithMany(p => p.Subject)
                    .HasForeignKey(d => d.MajorId)
                    .HasConstraintName("FK_Subject_Major");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}